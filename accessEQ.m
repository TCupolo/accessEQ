%
% MATLAB Build Commands: for easy C&P
%   parameterTuner(accessEQ)
%   audioTestBench accessEQ
%   validateAudioPlugin accessEQ
%   generateAudioPlugin -auv3 accessEQ 
%   execute "auval -a" in the terminal to confirm after app runs)
%
classdef accessEQ < audioPlugin   % accessEQ = object of class audioPlugin
    properties                    % Public (GUI) parameters
        G31dB       = 0;          % Define & Initialize  
        G63dB       = 0;
        G125dB      = 0;
        G250dB      = 0;
        G500dB      = 0;
        G1000dB     = 0;
        G2000dB     = 0;
        G4000dB     = 0;
        G8000dB     = 0;
        G16000dB    = 0;        
        LowDIS      = 0;
        MidDIS      = 0;
        HighDIS     = 0;
        SpeechINT   = 0;
        SpeechCHAN  = SpeechCHANNEL.center;
        Mastergain  = 0;
        Sidegain    = 0;
        SideDLY     = 0;
        Centergain  = 0;
        Rightgain   = 0;
        Leftgain    = 0;
    end                           % public parameters

    properties (Access = private) % private parameters & objects
        Fs          = 48000;      % Define & Initialize
        OCTFILT31;                % Define
        OCTFILT63;
        OCTFILT125;
        OCTFILT250;
        OCTFILT500;
        OCTFILT1000;
        OCTFILT2000;
        OCTFILT4000;
        OCTFILT8000;
        OCTFILT16000;
        OCTFILTMIDDIS;
        OCTFILTHIDIS;
        DELAY;
    end                         % private parameters
 
    properties (Constant)       % Matlab GUI object
        PluginInterface = audioPluginInterface(...
            'InputChannels',2,...
            'OutputChannels',2,...
            'PluginName', '2024A',...
            'VendorName','accessEQ', ...
            'VendorVersion','1.2.1', ...
            'BackgroundImage','guibgnd.png',...
            'BackgroundColor',[0.839 0.839 0.839],...% 1.0 = FFh
            audioPluginGridLayout(...
                'RowHeight',[15,80,80,40,15,50,35,70,70,70],...
                'ColumnWidth',[75,75,75,75,75,75,75,75,75,75,18,82],...
                'Padding',[25,10,10,40],....              %l,b,r,t
                'ColumnSpacing',10,...                    
                'RowSpacing',9),...
            audioPluginParameter(...
                'SideDLY',...
                'DisplayName','Precedence',...
                'DisplayNameLocation','Above',...
                'Label','mS',...
                'Mapping',{'lin',0,30},...
                'Layout',[8,9],...
                'Style','rotaryknob'),...                
            audioPluginParameter(...
                'Sidegain',...
                'DisplayName','Side',...
                'DisplayNameLocation','Above',...
                'Label','dB',...
                'Mapping',{'lin',-10,10},...
                'Layout',[8,1],...
                'Style','rotaryknob'),...
            audioPluginParameter(...
                'Leftgain',...
                'DisplayName','Left',...
                'DisplayNameLocation','Above',...
                'Label','dB',...
                'Mapping',{'lin',-10,10},...
                'Layout',[9,7],...
                'Style','rotaryknob'),...
            audioPluginParameter(...
                'Rightgain',...
                'DisplayName','Right',...
                'DisplayNameLocation','Above',...
                'Label','dB',...
                'Mapping',{'lin',-10,10},...
                'Layout',[9,3],...
                'Style','rotaryknob'),...
            audioPluginParameter(...
                'Centergain',...
                'DisplayName','Center', ...
                'DisplayNameLocation', 'Above',...
                'Label','dB',...
                'Mapping', {'lin',-10,10}, ...
                'Style', 'rotaryknob',... 
                'Layout', [10,5]),...                
            audioPluginParameter(...
                'SpeechINT',...
                'DisplayNameLocation','above',...
                'DisplayName','Intelligibility',...                
                'Label','%',...
                'Mapping',{'int',0,100},...
                'Layout', [10,12; 10,12],... 
                'Style', 'rotaryknob'),...
            audioPluginParameter(...
                'SpeechCHAN',...
                'DisplayNameLocation','Above',...
                'DisplayName','Channel',...                
                'Label','Direction',...
                'Mapping',{'enum','Center','Side'},...
                'Layout', [7,12;8,12],... 
                'Style', 'vtoggle'),...
            audioPluginParameter(...
                'Mastergain',...
                'DisplayName','Master Volume',...
                'DisplayNameLocation', 'Above',...
                'Label','dB',...
                'Mapping',{'lin',-40,40},...
                'Layout', [2,12; 3,12],... 
                'Style', 'vslider'),...                
            audioPluginParameter(...
                'LowDIS',...
                'DisplayName','Bass',...
                'DisplayNameLocation', 'Above',...
                'Label','X',...
                'Mapping',{'lin',0,1},...
                'Layout', [6,1; 6,5],... 
                'Style', 'hslider'),...
            audioPluginParameter(...
                'MidDIS',...
                'DisplayName','Mid',...
                'DisplayNameLocation','Above',...
                'Label','X',...
                'Mapping',{'lin',0,1},...
                'Layout',[6,6;6,8],...
                'Style','hslider'),...
            audioPluginParameter(...
                'HighDIS',...
                'DisplayName','Treble', ...
                'DisplayNameLocation', 'Above',...
                'Label','X',...
                'Mapping', {'lin',0,1}, ...
                'Style', 'hslider',... 
                'Layout', [6,9;6,10]),...
            audioPluginParameter(...
                'G31dB',...
                'DisplayName','31',...
                'DisplayNameLocation', 'above',...
                'EditBoxLocation', 'below',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,1;3,1],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G63dB',...
                'DisplayName','63',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,2;3,2],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G125dB',...
                'DisplayName','125',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,3;3,3],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G250dB',...
                'DisplayName','250',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,4;3,4],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G500dB',...
                'DisplayName','500',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,5;3,5],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G1000dB',...
                'DisplayName','1k',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,6;3,6],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G2000dB',...
                'DisplayName','2k',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,7;3,7],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G4000dB',...
                'DisplayName','4k',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,8;3,8],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G8000dB',...
                'DisplayName','8k',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,9;3,9],...
                'Style','vslider'),...
            audioPluginParameter(...
                'G16000dB',...
                'DisplayName','16k',...
                'DisplayNameLocation', 'above',...
                'Label','dB',...
                'Mapping',{'lin',-30,30},...
                'Layout',[2,10;3,10],...
                'Style','vslider'));                        
    end %GUI

    methods %public functions
%-----------------------------------------------------------------------
%       3. Init (Constructor) function
%-----------------------------------------------------------------------
        function plugin = accessEQ()
            % Get default sample rate
            plugin.Fs            = getSampleRate(plugin);

            % Create octave filters
            plugin.OCTFILT31     = octaveFilter(31.25,'SampleRate',plugin.Fs);
            plugin.OCTFILT63     = octaveFilter(62.50,'SampleRate',plugin.Fs);
            plugin.OCTFILT125    = octaveFilter(125,'SampleRate',plugin.Fs);
            plugin.OCTFILT250    = octaveFilter(250,'SampleRate',plugin.Fs);
            plugin.OCTFILT500    = octaveFilter(500,'SampleRate',plugin.Fs);
            plugin.OCTFILT1000   = octaveFilter(1000,'SampleRate',plugin.Fs);
            plugin.OCTFILT2000   = octaveFilter(2000,'SampleRate',plugin.Fs);
            plugin.OCTFILT4000   = octaveFilter(4000,'SampleRate',plugin.Fs);
            plugin.OCTFILT8000   = octaveFilter(8000,'SampleRate',plugin.Fs);
            plugin.OCTFILT16000  = octaveFilter(16000,'SampleRate',plugin.Fs);
            
            % Create clarifying octave filters             
            plugin.OCTFILTMIDDIS = octaveFilter(3250,'SampleRate',plugin.Fs,...
                                           'Bandwidth','1/2 octave',...
                                           'FilterOrder',2);
            plugin.OCTFILTHIDIS  = octaveFilter(10500,'SampleRate',plugin.Fs,...
                                           'Bandwidth','1 octave',...
                                           'FilterOrder',2);

            % Create side delay filters                                                    
            plugin.DELAY        = audioexample.DelayFilter(...
                                           'SampleRate',plugin.Fs,...
                                           'FeedbackLevel', 0);
            
            % Setup all filters to incur that 1X delay at plug-in load time
            sampleInput = zeros(1,2);
            setup(plugin.OCTFILT31,sampleInput);
            setup(plugin.OCTFILT63,sampleInput);
            setup(plugin.OCTFILT125,sampleInput);
            setup(plugin.OCTFILT250,sampleInput);
            setup(plugin.OCTFILT500,sampleInput);
            setup(plugin.OCTFILT1000,sampleInput);
            setup(plugin.OCTFILT2000,sampleInput);
            setup(plugin.OCTFILT4000,sampleInput);
            setup(plugin.OCTFILT8000,sampleInput);
            setup(plugin.OCTFILT16000,sampleInput);
            setup(plugin.OCTFILTMIDDIS,sampleInput);
            setup(plugin.OCTFILTHIDIS,sampleInput);
            maxsamples = 0.030 * 96000; % max delay * max sample rate
            setup(plugin.DELAY,maxsamples,sampleInput);

        end %constructor function
%-----------------------------------------------------------------------
%       1. Process Signal function
%-----------------------------------------------------------------------            
        function out = process(plugin, in)  %args(plugin object, in data)
        %---------------------------------------------------------------
        %       A. Cache GUI parameters here to prevent mid-loop changes
        %---------------------------------------------------------------          
            out31g      = db2mag(plugin.G31dB);            
            out63g      = db2mag(plugin.G63dB);            
            out125g     = db2mag(plugin.G125dB);                   
            out250g     = db2mag(plugin.G250dB);            
            out500g     = db2mag(plugin.G500dB);         
            out1000g    = db2mag(plugin.G1000dB);                     
            out2000g    = db2mag(plugin.G2000dB);            
            out4000g    = db2mag(plugin.G4000dB);            
            out8000g    = db2mag(plugin.G8000dB);            
            out16000g   = db2mag(plugin.G16000dB);
            Sideg       = db2mag(plugin.Sidegain);
            Centerg     = db2mag(plugin.Centergain);
            Leftg       = db2mag(plugin.Leftgain);
            Rightg      = db2mag(plugin.Rightgain);
            Masterg     = db2mag(plugin.Mastergain);
            simix       = plugin.SpeechINT / 100; %convert  % to linear          
            precedence  = plugin.SideDLY / 1000;  %convert mS to S
            precedence  = precedence * plugin.Fs; %convert  S to samples
            ldmix       = plugin.LowDIS;
            mdmix       = plugin.MidDIS;
            hdmix       = plugin.HighDIS;
            spchan      = plugin.SpeechCHAN;

        %---------------------------------------------------------------
        %       B. Initialize Data
        %           out is both the final output and an
        %           intermediate processing buffer
        %---------------------------------------------------------------
            out       = in; 

        %---------------------------------------------------------------
        %       C. Apply Spatial EQ
        %---------------------------------------------------------------
            %Apply C/S gains & precedence delay
            if (precedence ~= 0)                        
                out_d     = plugin.DELAY(precedence, in);
                x = [out(:,1) + out(:,2), out_d(:,1) - out_d(:,2)];    
                if ((Sideg ~= 1) || (Centerg ~= 1))               
                    x = [x(:,1)*Centerg, x(:,2)*Sideg];  
                end
                out = [(x(:,1) + x(:,2))/2, (x(:,1) - x(:,2))/2]; 
            else
                if ((Sideg ~= 1) || (Centerg ~= 1))               
                    x = [out(:,1) + out(:,2), out(:,1) - out(:,2)];        
                    x = [x(:,1)*Centerg, x(:,2)*Sideg];  
                    out = [(x(:,1) + x(:,2))/2, (x(:,1) - x(:,2))/2]; 
                end
            end
            %Apply L/R gains 
            if (Leftg ~= 1) 
                    out(:,1) = Leftg * out(:,1);    
            end    
            if (Rightg ~= 1) 
                    out(:,2) = Rightg * out(:,2);   
            end

        %---------------------------------------------------------------
        %       D. Create the 10 octave band signals
        %---------------------------------------------------------------                      
            out31       = plugin.OCTFILT31(out);
            out63       = plugin.OCTFILT63(out);
            out125      = plugin.OCTFILT125(out);
            out250      = plugin.OCTFILT250(out);
            out500      = plugin.OCTFILT500(out);
            out1000     = plugin.OCTFILT1000(out);
            out2000     = plugin.OCTFILT2000(out);
            out4000     = plugin.OCTFILT4000(out);
            out8000     = plugin.OCTFILT8000(out);
            out16000    = plugin.OCTFILT16000(out);
           
        %---------------------------------------------------------------
        %       E. Apply Speech EQ
        %           Zero all non-speech bands (31,63,125,8k, 16k)
        %           Zero 'Side' from all speech bands (250,500,1k,2k,4k)
        %---------------------------------------------------------------                      
            if (simix ~= 0)                   %Is Speech EQ active?
                
                % yes, attenuate non-voice bands per mix
                out31    = (1-simix)*out31;
                out63    = (1-simix)*out63;
                out125   = (1-simix)*out125;
                out8000  = (1-simix)*out8000;
                out16000 = (1-simix)*out16000;
                
                % mix down 'channel' from voice bands, zero 'side' for all
                x        = zeros(size(in));               % S=x(:,2)=0
                if (spchan == SpeechCHANNEL.side)
                    x(:,1)   = out250(:,1) - out250(:,2); % C=S encoding. 
                else 
                    x(:,1)   = out250(:,1) + out250(:,2); % C=C encoding. 
                end
                out      = [(x(:,1) + x(:,2)), (x(:,1) - x(:,2))];  % L/R decoding.
                out      = (1.4125/2) * out;
                out250   = ((1-simix)*out250)  + (simix*out);
                if (spchan == SpeechCHANNEL.side)
                    x(:,1)   = out500(:,1) - out500(:,2); % C=S encoding. 
                else 
                    x(:,1)   = out500(:,1) + out500(:,2); % C=C encoding. 
                end
                out      = [(x(:,1) + x(:,2)), (x(:,1) - x(:,2))];  % L/R decoding.
                out      = (1.4125/2) * out;
                out500   = ((1-simix)*out500)  + (simix*out);
                if (spchan == SpeechCHANNEL.side)
                    x(:,1)   = out1000(:,1) - out1000(:,2);% C=S encoding. 
                else 
                    x(:,1)   = out1000(:,1) + out1000(:,2);% C=C encoding. 
                end
                out      = [(x(:,1) + x(:,2)), (x(:,1) - x(:,2))];  % L/R decoding.                
                out      = (1.4125/2) * out;
                out1000  = ((1-simix)*out1000) + (simix*out);
                if (spchan == SpeechCHANNEL.side)
                    x(:,1)   = out2000(:,1) - out2000(:,2);% C=S encoding. 
                else 
                    x(:,1)   = out2000(:,1) + out2000(:,2);% C=C encoding. 
                end
                out      = [(x(:,1) + x(:,2)), (x(:,1) - x(:,2))];  % L/R decoding.                                
                out      = (1.4125/2) * out;
                out2000  = ((1-simix)*out2000) + (simix*out);
                if (spchan == SpeechCHANNEL.side)
                    x(:,1)   = out4000(:,1) - out4000(:,2);% C=S encoding. 
                else 
                    x(:,1)   = out4000(:,1) + out4000(:,2);% C=C encoding. 
                end
                out      = [(x(:,1) + x(:,2)), (x(:,1) - x(:,2))];  % L/R decoding.                                                
                out      = (1.4125/2) * out;
                out4000  = ((1-simix)*out4000) + (simix*out);
                
                % Apply Speech EQ overides
                ldmix = (simix^2) * 0.20;
                mdmix = (simix^2) * 0.75;  
                Masterg = db2mag(plugin.Mastergain + (3*simix));  

            end    %if simix ~= 0
            
        %---------------------------------------------------------------
        %       F. Apply Frequency EQ
        %---------------------------------------------------------------                      
            out31       = out31g    * out31;            
            out63       = out63g    * out63;            
            out125      = out125g   * out125;            
            out250      = out250g   * out250;            
            out500      = out500g   * out500;            
            out1000     = out1000g  * out1000;            
            out2000     = out2000g  * out2000;            
            out4000     = out4000g  * out4000;            
            out8000     = out8000g  * out8000;            
            out16000    = out16000g * out16000;
          
        %---------------------------------------------------------------
        %       G. Mix the 10 octave bands down to 3 parametric bands
        %---------------------------------------------------------------                      
            outlo   = out31 + out63 + out125 + out250 + out500;
            outmid  = out1000 + out2000 + out4000;
            outhi   = out8000 + out16000;
                      
        %---------------------------------------------------------------
        %       H. Apply Frequency  Discrimination
        %            Each band approximates the Fletcher Munson (F/M)
        %            equal loudness contours coverted to dB at 1Khz
        %---------------------------------------------------------------                      
            
            % BASS: make F/M curve using 'step' filter approx.
            wet      = (7.5*out31)  + (12.5*out63) + ...
                       (5.5*out125) + (3.5*out250) + out500;
            outlo    = ((1-ldmix)*outlo) + (ldmix*wet);
            
            % MID: make F/M curve using 'shaping' filter approx.
            out2000  = out2000 + out4000;            % add bands here to pass only
            wet      = plugin.OCTFILTMIDDIS(out2000(:,1:2));%1 signal in here
            wet      = 5.6234*wet;
            outmid   = outmid - (mdmix*wet);   
                        
            % TREBLE: make F/M curve using 'shaping' filter approx.          
            wet      = 5.6234*plugin.OCTFILTHIDIS(outhi(:,1:2));
            outhi    = ((1-hdmix)*outhi) + (hdmix*wet);   

        %---------------------------------------------------------------
        %       I. Mix 3 parametric bands down to final out
        %---------------------------------------------------------------                      
            out      = outlo + outmid + outhi;
            
        %---------------------------------------------------------------
        %       J. Apply master gain
        %--------------------------------------------------------------- 
            if (Masterg ~= 1) 
                    out      = Masterg * out;       %Apply Master gain
            end
        
        end % process function
        
%-----------------------------------------------------------------------
%       2.  GUI set functions
%-----------------------------------------------------------------------
        function set.Rightgain(plugin, val)
            plugin.Rightgain = val;     
        end
        function set.Leftgain(plugin, val)
            plugin.Leftgain = val;     
        end
        function set.SpeechINT(plugin, val)
            plugin.SpeechINT = val;     
        end
        function set.SpeechCHAN(plugin, val)
            plugin.SpeechCHAN = val;     
        end
        function set.LowDIS(plugin, val)
            plugin.LowDIS = val;     
        end 
        function set.MidDIS(plugin, val)
            plugin.MidDIS = val;     
        end 
        function set.HighDIS(plugin, val)
            plugin.HighDIS = val;     
        end 
        function set.Mastergain(plugin, val)
            plugin.Mastergain = val;     
        end 
        function set.Centergain(plugin, val)
            plugin.Centergain = val;     
        end 
        function set.Sidegain(plugin, val)
            plugin.Sidegain = val;
        end
        function set.SideDLY(plugin, val)
            plugin.SideDLY = val;
        end         
        function set.G31dB(plugin, val)
            plugin.G31dB = val;
        end
        function set.G63dB(plugin, val)
            plugin.G63dB = val;
        end       
        function set.G125dB(plugin, val)
            plugin.G125dB = val;
        end       
        function set.G250dB(plugin, val)
            plugin.G250dB = val;
        end       
        function set.G500dB(plugin, val)
            plugin.G500dB = val;
        end       
        function set.G1000dB(plugin, val)
            plugin.G1000dB = val;
        end       
        function set.G2000dB(plugin, val)
            plugin.G2000dB = val;
        end       
        function set.G4000dB(plugin, val)
            plugin.G4000dB = val;
        end       
        function set.G8000dB(plugin, val)
            plugin.G8000dB = val;
        end       
        function set.G16000dB(plugin, val)
            plugin.G16000dB = val;
        end
%-----------------------------------------------------------------------
%       4.  Reset function
%-----------------------------------------------------------------------
        function reset(plugin)

            % Reset objects internal state            
            reset(plugin.OCTFILT31);
            reset(plugin.OCTFILT63);
            reset(plugin.OCTFILT125);
            reset(plugin.OCTFILT250);
            reset(plugin.OCTFILT500);
            reset(plugin.OCTFILT1000);
            reset(plugin.OCTFILT2000);
            reset(plugin.OCTFILT4000);
            reset(plugin.OCTFILT8000);
            reset(plugin.OCTFILT16000);
            reset(plugin.OCTFILTMIDDIS);
            reset(plugin.OCTFILTHIDIS);
            reset(plugin.DELAY);
            
            % Get new sample rate
            plugin.Fs                        = getSampleRate(plugin);

            % Set new sample rate
            plugin.OCTFILT31.SampleRate      = plugin.Fs;
            plugin.OCTFILT63.SampleRate      = plugin.Fs;
            plugin.OCTFILT125.SampleRate     = plugin.Fs;
            plugin.OCTFILT250.SampleRate     = plugin.Fs;
            plugin.OCTFILT500.SampleRate     = plugin.Fs;
            plugin.OCTFILT1000.SampleRate    = plugin.Fs;
            plugin.OCTFILT2000.SampleRate    = plugin.Fs;
            plugin.OCTFILT4000.SampleRate    = plugin.Fs;
            plugin.OCTFILT8000.SampleRate    = plugin.Fs;
            plugin.OCTFILT16000.SampleRate   = plugin.Fs;
            plugin.OCTFILTMIDDIS.SampleRate  = plugin.Fs;
            plugin.OCTFILTHIDIS.SampleRate   = plugin.Fs;
            plugin.DELAY.SampleRate          = plugin.Fs;
                 
        end % reset function 
    end % public methods 
end % audioPlugin classdef